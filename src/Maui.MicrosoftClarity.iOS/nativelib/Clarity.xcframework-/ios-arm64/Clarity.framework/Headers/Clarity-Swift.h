#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef CLARITY_SWIFT_H
#define CLARITY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Clarity",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, ApplicationFramework, open) {
  ApplicationFrameworkNative = 0,
  ApplicationFrameworkCordova = 1,
  ApplicationFrameworkReactNative = 2,
  ApplicationFrameworkIonic = 3,
};

@class NSString;
enum LogLevel : NSInteger;

/// A class that allows you to configure the Clarity SDK behavior.
/// <ul>
///   <li>
///     projectId: the Clarity’s project id to send the data to. You can get it from the Clarity dashboard.
///   </li>
///   <li>
///     userId: an id that is associated with the Clarity sessions.
///     <ul>
///       <li>
///         This value is sticky across different application runs or Clarity sessions.
///       </li>
///       <li>
///         The id must be a base-36 string and smaller than the upper limit of <code>1Z141Z4</code>.
///         <ul>
///           <li>
///             If you need more flexibility, consider using <code>setCustomUserId()</code>.
///           </li>
///         </ul>
///       </li>
///       <li>
///         If no user ID is provided, a randomly generated one is used.
///       </li>
///       <li>
///         If an invalid ID is provided, it will be set as a custom user id, and a random one is then generated for the user id field.
///       </li>
///     </ul>
///   </li>
///   <li>
///     logLevel: the level of logs that Clarity should report in the application log stream.
///   </li>
///   <li>
///     applicationFramework: signals to the SDK which framework is being used to develop the current application. You should not need to set this parameter on your own.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC7Clarity13ClarityConfig")
@interface ClarityConfig : NSObject
/// Initializes a new instance of the ClarityConfig class.
/// \param projectId the Clarity’s project id to send the data to. You can get it from the Clarity dashboard.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId;
/// An id that is associated with the Clarity sessions.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This value is sticky across different application runs or Clarity sessions.
///       </li>
///       <li>
///         The id must be a base-36 string and smaller than the upper limit of <code>1Z141Z4</code>.
///         <ul>
///           <li>
///             If you need more flexibility, consider using <code>setCustomUserId()</code>.
///           </li>
///         </ul>
///       </li>
///       <li>
///         If no user ID is provided, a randomly generated one is used.
///       </li>
///       <li>
///         If an invalid ID is provided, it will be set as a custom user id, and a random one is then generated for the user id field.
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable userId;
/// The level of logs that Clarity should report in the application log stream.
@property (nonatomic) enum LogLevel logLevel;
@property (nonatomic) BOOL allowMeteredNetworkUsage;
@property (nonatomic) BOOL enableWebViewCapture;
@property (nonatomic) BOOL disableOnLowEndDevices;
/// Signals to the SDK which framework is being used to develop the current application. You should not need to set this parameter on your own.
@property (nonatomic) enum ApplicationFramework applicationFramework;
@property (nonatomic) BOOL enableSwiftUI_Experimental;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC7Clarity10ClaritySDK")
@interface ClaritySDK : NSObject
/// Initializes Clarity to start capturing the current session data.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param config the config that tunes the SDK behavior (e.g., which project to send to, what user id to use, …etc)
///
+ (void)initializeWithConfig:(ClarityConfig * _Nonnull)config;
/// Initializes Clarity to start capturing the current session data.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param config the config that tunes the SDK behavior (e.g., which project to send to, what user id to use, …etc)
///
/// \param onClarityInitialized a callback to be called once Clarity initialization is completed (note: Clarity session might start a little bit after initialization).
///
+ (void)initializeWithConfig:(ClarityConfig * _Nonnull)config onClarityInitialized:(void (^ _Nonnull)(void))onClarityInitialized;
/// Pauses the Clarity capturing logic until a call to the <code>resume</code> function is made.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)pause;
/// Resumes the Clarity capturing logic if, and only if, it was paused by an earlier call to the <code>pause</code> function.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)resume;
/// Returns <code>true</code> if Clarity is currently in the paused state based on an earlier call to the <code>pause</code> function.
+ (BOOL)isPaused SWIFT_WARN_UNUSED_RESULT;
/// Masks a certain UIView so that Clarity does not capture any text or images of this view (i.e., content is replaced with placeholders).
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)maskView:(UIView * _Nonnull)view;
/// Unmasks a certain UIView so that Clarity captures its content even if it’s a child of another masked view or if it’s inside a masked screen.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
+ (void)unmaskView:(UIView * _Nonnull)view;
/// Sets a custom user id for the current session which can then be used to filter the sessions on the Clarity dashboard.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: <code>true</code> if setting the custom user id succeeded.
+ (BOOL)setCustomUserId:(NSString * _Nonnull)customUserId;
/// Sets a custom session id for the current session which can then be used to filter the sessions on the Clarity dashboard.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: <code>true</code> if setting the custom session id succeeded
+ (BOOL)setCustomSessionId:(NSString * _Nonnull)customSessionId;
/// Returns the ongoing Clarity session id if a session has already started.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This is particularly useful to link Clarity’s sessions with other telemetry services.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: the current session id in case there’s an active session; otherwise, it returns null.
+ (NSString * _Nullable)getCurrentSessionId SWIFT_WARN_UNUSED_RESULT;
/// Returns the ongoing Clarity session URL on the Clarity dashboard if a session has already started.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This is particularly useful to link Clarity’s sessions with other telemetry services.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: the current session URL in case there’s an active session; otherwise, it returns null.
+ (NSString * _Nullable)getCurrentSessionUrl SWIFT_WARN_UNUSED_RESULT;
/// Sets a custom tag for the current session which can then be used to filter the sessions on the Clarity dashboard.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: <code>true</code> if setting the custom tag succeeded
+ (BOOL)setCustomTagWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Sets a custom screen name for the current screen on React Native applications only.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         The screen name is added as a component name and you can filter on that on the dashboard as well.
///       </li>
///       <li>
///         This function cannot be used unless your app is a React Native one.
///       </li>
///       <li>
///         This function must be called on the main thread only.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: <code>true</code> if setting the custom screen name succeeded
+ (BOOL)setCurrentScreenNameWithName:(NSString * _Nullable)name;
/// Sets a callback that will be called whenever a new session of Clarity has started. The callback should take the session id as a string.
/// <ul>
///   <li>
///     Notes:
///     <ul>
///       <li>
///         If you call this function to set a callback after a session has already started, we’ll call the callback right away with the existing session id.
///       </li>
///       <li>
///         The callback is guaranteed to run on the main thread.
///       </li>
///     </ul>
///   </li>
/// </ul>
/// Returns: <code>true</code> if setting the callback succeeded.
/// \param callback the callback to be called each time a new session has started.
///
+ (BOOL)setOnNewSessionStartedCallback:(void (^ _Nonnull)(NSString * _Nonnull))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
  LogLevelVerbose = 0,
  LogLevelDebug = 1,
  LogLevelInfo = 2,
  LogLevelWarning = 3,
  LogLevelError = 4,
  LogLevelNone = 5,
};



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
